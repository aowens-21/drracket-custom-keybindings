#lang racket/base

(require kb-base)

(provide gen-type-case)

(define (gen-type-case type-name var-pos)
  (seq (set-position (last-position))
       (insert-return)
       (insert-return)
       (insert "(type-case ")
       (insert type-name)
       (insert " ...")
       (insert-return)
       (kb-let
        (['insert-posn (get-position)])
        (set-position var-pos)
        (do-times (count-iters (forward-sexp-exists?)
                               1
                               'sexp)
                  (down-sexp)
                  (kb-let
                   (['current-variant-name-posn (get-position)])
                          (set-position 'insert-posn)
                          (insert "[")
                          (insert (get-forward-word 'current-variant-name-posn))
                          (insert " (")
                          (kb-set! 'insert-posn (get-position))
                          (set-position 'current-variant-name-posn)
                          (forward-sexp)
                          (do-times (count-iters (forward-sexp-exists?)
                                                 1
                                                 'sexp)
                                    (down-sexp)
                                    (kb-let
                                     (['current-field-name-posn (get-position)])
                                            (set-position 'insert-posn)
                                            (insert (get-forward-word 'current-field-name-posn))
                                            (insert " ")
                                            (kb-set! 'insert-posn (get-position))
                                            (set-position 'current-field-name-posn)
                                            (up-sexp)
                                            (forward-sexp)))
                          (set-position 'insert-posn)
                          (delete (sub (get-position) 1) (get-position))
                          (insert ") ...]")
                          (insert-return)
                          (kb-set! 'insert-posn (get-position))
                          (set-position 'current-variant-name-posn)
                          (up-sexp)
                          (forward-sexp)))
        (set-position 'insert-posn)
        (seek-while (kb-not (kb-equal? (get-character) #\])) -1 'simple)
        (move-position 1 'simple)
        (insert ")"))))